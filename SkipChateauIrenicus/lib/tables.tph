// *** Prepares item control tables ***

OUTER_TEXT_SPRINT table_data ~~

ACTION_BASH_FOR ~%MOD_FOLDER%/tables~ ~^.+\.2da$~ BEGIN
  COPY - ~%BASH_FOR_FILESPEC%~ ~%BASH_FOR_FILESPEC%~
    PATCH_IF (SOURCE_SIZE > 0) BEGIN
      READ_ASCII 0 data (SOURCE_SIZE)
      TEXT_SPRINT table_data ~%table_data%%LNL%%data%~
    END
END

// "control_table" contains all available item and container definitions
OUTER_PATCH ~%table_data%~ BEGIN
  READ_2DA_ENTRIES_NOW ~control_table~ 7
END

// Helper function: Returns the row of a matching container name. Returns -1 if not found.
DEFINE_PATCH_FUNCTION TABLE_MATCH_CONTAINER
STR_VAR
  area      = ~~  // the area where the container is located
  container = ~~  // the container name (without spaces)
RET row
BEGIN
  SET row = "-1"
  PATCH_IF (NOT ~%area%~ STRING_EQUAL ~~ AND NOT ~%container%~ STRING_EQUAL ~~) BEGIN
    FOR (idx = 0; idx < control_table; idx += 1) BEGIN
      READ_2DA_ENTRY_FORMER "control_table" idx 0 action
      PATCH_IF (~%action%~ STRING_EQUAL ~SKIP_CONTAINER~) BEGIN
        READ_2DA_ENTRY_FORMER "control_table" idx 1 areaName
        READ_2DA_ENTRY_FORMER "control_table" idx 2 containerName
        PATCH_IF (~%area%~ STRING_EQUAL_CASE ~%areaName%~ AND ~%container%~ STRING_EQUAL_CASE ~%containerName%~) BEGIN
          SET row = idx
          SET idx = control_table
        END
      END
    END
  END
END



// Variables containing script portions for handling items and containers
OUTER_TEXT_SPRINT container_contents ~~   // sequence of script actions
OUTER_TEXT_SPRINT item_create ~~          // sequence of script actions
OUTER_TEXT_SPRINT item_create_unique ~~   // sequence of individual script blocks
OUTER_TEXT_SPRINT item_destroy ~~         // sequence of script actions
OUTER_TEXT_SPRINT item_destroy_party ~~   // sequence of script actions


// Generating item transfer script
ACTION_DEFINE_ASSOCIATIVE_ARRAY areaContainers BEGIN
  ~A7-Rubble1~ => ~AR0602.ARE~
  ~A7-Rubble2~ => ~AR0603.ARE~
  ~A7-Rubble3~ => ~AR0601.ARE~
END

ACTION_PHP_EACH areaContainers AS dstContainer => srcArea BEGIN
  COPY_EXISTING - ~%srcArea%~ ~override~
    READ_LONG 0x70 ofsContainers
    READ_SHORT 0x74 numContainers
    FOR (idx = 0; idx < numContainers; idx += 1) BEGIN
      SET ofs = ofsContainers + (idx * 0xc0)
      READ_ASCII ofs name (32) NULL
      INNER_PATCH_SAVE name ~%name%~ BEGIN REPLACE_TEXTUALLY ~[ %TAB%]~ ~~ END
      LPF TABLE_MATCH_CONTAINER STR_VAR area = EVAL ~%SOURCE_RES%~ container = EVAL ~%name%~ RET row END
      PATCH_IF (row < 0) BEGIN
        TEXT_SPRINT container_contents ~%container_contents% MoveContainerContents("%SOURCE_RES%*%name%","AR0700*%dstContainer%")~
      END ELSE BEGIN
        PATCH_LOG ~DEBUG: Excluding container "%SOURCE_RES%*%name%"~
      END
    END
END


// Generating item creation and destruction scripts
OUTER_FOR (idx = 0; idx < control_table; idx += 1) BEGIN
  OUTER_PATCH ~dummy~ BEGIN
    READ_2DA_ENTRY_FORMER "control_table" idx 0 action
    READ_2DA_ENTRY_FORMER "control_table" idx 1 area

    // determining target container
    PATCH_IF (~%area%~ STRING_EQUAL_CASE ~AR0602~) BEGIN
      TEXT_SPRINT dstContainer ~A7-Rubble1~
    END ELSE PATCH_IF (~%area%~ STRING_EQUAL_CASE ~AR0603~) BEGIN
      TEXT_SPRINT dstContainer ~A7-Rubble2~
    END ELSE BEGIN
      TEXT_SPRINT dstContainer ~A7-Rubble3~
    END

    PATCH_IF (~%action%~ STRING_EQUAL ~CREATE_ITEM~) BEGIN
      READ_2DA_ENTRY_FORMER "control_table" idx 2 res
      READ_2DA_ENTRY_FORMER "control_table" idx 3 unique
      READ_2DA_ENTRY_FORMER "control_table" idx 4 charge1
      READ_2DA_ENTRY_FORMER "control_table" idx 5 charge2
      READ_2DA_ENTRY_FORMER "control_table" idx 6 charge3

      PATCH_IF (unique) BEGIN
        TEXT_SPRINT item_create_unique ~%item_create_unique%%LNL%IF Global("A7-ShortcutEnabled", "GLOBAL", 1) Global("A7-TransferItems", "MYAREA", 0) !PartyHasItem("%res%") THEN RESPONSE #100 ActionOverride("%dstContainer%", CreateItem("%res%", %charge1%, %charge2%, %charge3%)) Continue() END~
      END ELSE BEGIN
        TEXT_SPRINT item_create ~%item_create%%LNL%ActionOverride("%dstContainer%", CreateItem("%res%", %charge1%, %charge2%, %charge3%))~
      END
    END ELSE PATCH_IF (~%action%~ STRING_EQUAL ~DESTROY_ITEM~) BEGIN
      READ_2DA_ENTRY_FORMER "control_table" idx 1 area
      READ_2DA_ENTRY_FORMER "control_table" idx 2 res
      READ_2DA_ENTRY_FORMER "control_table" idx 3 invOnly

      TEXT_SPRINT item_destroy_party ~%item_destroy_party%%LNL%TakePartyItemAll("%res%")~
      PATCH_IF (invOnly = 0) BEGIN
        TEXT_SPRINT item_destroy ~%item_destroy%%LNL%ActionOverride("%dstContainer%", DestroyItem("%res%"))~
      END
    END
  END
END
